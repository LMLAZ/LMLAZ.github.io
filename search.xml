<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/zh-cn/uncategorized/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Swift Guard Statement（Swift中的 guard 语句）</title>
    <url>/zh-cn/Swift/Basic-usage/swift-guard.html</url>
    <content><![CDATA[<h3 id="posted-by-ecerney"><a href="#posted-by-ecerney" class="headerlink" title="posted by ecerney"></a>posted by ecerney</h3><p>这篇文章转自：<a href="https://ericcerney.com/swift-guard-statement/">https://ericcerney.com/swift-guard-statement/</a></p>
<br>

<p>When I first saw the Swift <code>guard</code> statement during Apple’s Platform State of the Union, I couldn’t quite understand why I would ever use it. So what is it? The tl;dr is as follows:<br><br></p>
<p><code>Like an if statement, guard executes statements based on a Boolean value of an expression. Unlike an if statement, guard statements only run if the conditions are not met. You can think of guard more like an Assert, but rather than crashing, you can gracefully exit.</code><br><br></p>
<p>Even after seeing some examples, I only saw it as a confusing way to accomplish what we already could with Optional Binding or with <code>if-else</code> statements alone.</p>
<br>
It wasn’t until I started discussing it over this Twitter conversation that I realized there are actually some interesting benefits of using such syntax.
<br>
<br>

<h2 id="Diving-In"><a href="#Diving-In" class="headerlink" title="Diving In"></a>Diving In</h2><p>Let’s take a simple example comparing current techniques vs using the new guard statement:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooManualCheck</span>(<span class="params">x</span>: <span class="type">Int</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">||</span> x <span class="operator">&lt;=</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do stuff with x</span></span><br><span class="line">    x<span class="operator">!</span>.description</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is the most basic Objective-C style way to make sure a value exists and that it meets a condition. Now this works fine, but has a couple flaws:</p>
<ol>
<li>You’re checking for a condition that you don’t want, rather than checking for the value you do want. Code becomes confusing when you have a bunch of checks like this. What you’re hoping for here is that your condition actually doesn’t pass.</li>
<li>You also need to force unwrap the optional value after the condition fails.<br></li>
</ol>
<p>Swift gave us a way to clean this up and fix some of these flaws through Optional Binding:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooBinding</span>(<span class="params">x</span>: <span class="type">Int</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x <span class="operator">=</span> x <span class="keyword">where</span> x <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Do stuff with x</span></span><br><span class="line">        x.description</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This removes both of the flaws that the first function had, but adds a new one. Here you’re putting your desired code within all the conditions, rather than afterward. You might not immediately see a problem with this, but you could imagine how confusing it could become if it was nested with numerous conditions that all needed to be met before running your statements.</p>
<p>The way to clean this up is to do each of your checks first, and exit if any aren’t met. This allows easy understanding of what conditions will make this function exit.</p>
<p>I’ve heard this called the Bouncer Pattern, which makes a lot of sense. You want to get rid of the bad cases before they get in the door. It also allows you to think about one case at a time, rather than figuring out how all combinations need to work together.</p>
<p>Here enters the <code>guard</code> statement:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooGuard</span>(<span class="params">x</span>: <span class="type">Int</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> x <span class="operator">=</span> x <span class="keyword">where</span> x <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do stuff with x</span></span><br><span class="line">    x.description</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using <code>guard</code> solves all 3 of the issues mentioned above:</p>
<ol>
<li>Checking for the condition you do want, not the one you don’t. This again is similar to an <code>assert</code>. If the condition is not met, <code>guard‘s else</code> statement is run, which breaks out of the function.</li>
<li>If the condition passes, the optional variable here is automatically unwrapped for you within the scope that the <code>guard</code> statement was called – in this case, the <code>fooGuard(_:)</code> function. This is an important, yet notably strange feature that really makes the <code>guard</code> statement useful.</li>
<li>You are checking for bad cases early, making your function more readable and easier to maintain.<br></li>
</ol>
<p>The cool thing is that this same pattern holds true for non-optional values as well:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooNonOptionalGood</span>(<span class="params">x</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> x <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do stuff with x</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooNonOptionalBad</span>(<span class="params">x</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x <span class="operator">&lt;=</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do stuff with x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Wrapping-Up"><a href="#Wrapping-Up" class="headerlink" title="Wrapping Up"></a>Wrapping Up</h2><p>I hope this simple example shows how you could start using <code>guard</code> immediately in your Swift code to make your function/methods more clear. It’s easy for us to immediately judge the value of a new feature until you give it a chance and see what it can or can’t do for you.</p>
<p>Going from Objective-C to Swift is a huge change, not only to syntax, but how you have to look at architecting your code. You can only benefit from this awesome new language if you actively change your mindset while writing code by expanding your everyday patterns and style.</p>
]]></content>
      <categories>
        <category>Swift</category>
        <category>Basic usage</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>keyword</tag>
        <tag>reprint</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 中设置APP的图标（Icon）和启动页面（Launch Screen）</title>
    <url>/zh-cn/Swift/swiftui-project-icon-and-launch-pic.html</url>
    <content><![CDATA[<h3 id="posted-by-LeoZhao"><a href="#posted-by-LeoZhao" class="headerlink" title="posted by LeoZhao"></a>posted by LeoZhao</h3><br>

<p>图标 <code>Icon</code> 和启动页面 <code>Launch Screen</code> 无疑是一个 App 最重要的东西之一，它能给用户以第一印象，是否能 catch one’s eyes 就看图标和启动页面的表现了（况且，连图标和启动页面都没有的话也太水了吧 😂 ）。<br><br></p>
<p>幸好在 Xcode 中设置 <code>Icon</code> 和 <code>Launch Screen</code> 比较简单，不用花多少功夫，现在就让我们 diving in吧。</p>
<h2 id="设置图标（Icon）"><a href="#设置图标（Icon）" class="headerlink" title="设置图标（Icon）"></a>设置图标（Icon）</h2><p>首先，要准备4组图标（如果是发布在 <code>iOS</code> 平台上），这4组分别是 <code>120 x 120 px</code>，<code>152 x 152 px</code>，<code>167 x 167 px</code>，<code>1024 x 1024 px</code> 的尺寸，要 <code>PNG</code> 格式。<br><br>然后，将这4张图片 <code>Add Files to &lt;Your Project&gt;</code>。<br><br>接下来，打开 <code>Assets.xcassets</code>，将项目结构中的图片拉入 <code>AppIcon</code> 中的相应位置，就像这样<br><br><br><img src="/zh-cn/Swift/swiftui-project-icon-and-launch-pic/appicon.png" alt="将4个图标放入xcassets"></p>
<br>

<p>最后，在你的 xcodeproj 中将 <code>App Icons Source</code> 设为 <code>AppIcon</code>，接下来重新 <code>Build</code> 即可。</p>
<h2 id="设置启动页面（Launch-Screen）"><a href="#设置启动页面（Launch-Screen）" class="headerlink" title="设置启动页面（Launch Screen）"></a>设置启动页面（Launch Screen）</h2><p>在我当前的 Xcode 版本（13.0）中，要设置启动页面需要有 <code>Launch Screen File</code>，事实上，这个文件可以使用 <code>.storyboard</code>。<br><br>我们在项目中创建 <code>.storyboard</code>文件，我将其命名为 “Launch Screen.storyboard”。<br><br>打开我们的 storyboard，然后在里面设计即可。<br><br>最后，在我们的 xcodeproj 中将 <code>Launch Screen File</code> 设置为 “Launch Screen.storyboard”。<br><br>这样就完成了。<br><br></p>
<h2 id="附：在-storyboard-中全屏图片"><a href="#附：在-storyboard-中全屏图片" class="headerlink" title="附：在 storyboard 中全屏图片"></a>附：在 storyboard 中全屏图片</h2><p><em>因为我的启动界面是用图片做成的静态界面，所以我介绍一下storyboard 中全屏图片（保留 <code>Safe Area</code> ）的方法</em></p>
<p>首先，在 <code>Assets.xcassets</code> 中引入图片，<code>直接拖入</code>或<code>点击左下角的+</code>都可。<br><br>然后，在 storyboard 中，点击右上角的加号，添加一个 <code>Image View</code>，并在 <code>Image View</code>的属性面板中设置 <code>Image</code> 为刚添加的 asset。<br><br>接下来，选中新添加的 <code>Image View</code> ，点击底部栏中的 <code>Add New Constraints（意为约束）</code>，并将上下左右四个为虚线的 <code>constraints</code> 点亮、设置为0，设置完成后点击面板下面的 <code>Add Constraints</code>。<br><br><br><img src="/zh-cn/Swift/swiftui-project-icon-and-launch-pic/launch_screen.png" alt="Add New Constraints"><br><br><br><img src="/zh-cn/Swift/swiftui-project-icon-and-launch-pic/constraints.png" alt="set all Constraints"></p>
<br>

<p>最后，就是设置图片居中了，注意选中 <code>Image View</code> ，点击 <code>Add New Constraints</code> 左边的 <code>Align</code>，选中 <code>Horizontally in Container</code> 和 <code>Vertically in Container</code>，设置完成后点击面板下面的 <code>Add Constraints</code>，设置完成 🥳 。<br><br><br><img src="/zh-cn/Swift/swiftui-project-icon-and-launch-pic/align.png" alt="the final results"></p>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>Xcode</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI Property Wrappers</title>
    <url>/zh-cn/Swift/swiftui-property-wrappers.html</url>
    <content><![CDATA[<h3 id="posted-by-Majid"><a href="#posted-by-Majid" class="headerlink" title="posted by Majid"></a>posted by Majid</h3><p>这篇文章转载自：<a href="https://swiftwithmajid.com/2019/06/12/understanding-property-wrappers-in-swiftui/">https://swiftwithmajid.com/2019/06/12/understanding-property-wrappers-in-swiftui/</a><br>中文翻译可以看这篇文章：<a href="https://www.cnblogs.com/xiaoniuzai/p/11417123.html">https://www.cnblogs.com/xiaoniuzai/p/11417123.html</a></p>
<br>

<p>Today I want to continue this topic by covering <code>Property Wrappers</code> provided by SwiftUI. SwiftUI gives us <code>@State</code>, <code>@Binding</code>, <code>@ObservedObject</code>, <code>@EnvironmentObject</code>, and <code>@Environment</code> Property Wrappers. So let’s try to understand the differences between them and when and why which one we have to use.</p>
<br>

<h2 id="Property-Wrappers"><a href="#Property-Wrappers" class="headerlink" title="Property Wrappers"></a>Property Wrappers</h2><p><code>Property Wrappers</code> feature described in <a href="https://github.com/DougGregor/swift-evolution/blob/property-wrappers/proposals/0258-property-wrappers.md">SE-0258</a> proposal. The main goal here is wrapping properties with logic which can be extracted into the separated struct to reuse it across the codebase.</p>
<h2 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h2><p><code>@State</code> is a <code>Property Wrapper</code> which we can use to describe <code>View</code>’s state. SwiftUI will store it in special internal memory outside of <code>View</code> struct. Only the related <code>View</code> can access it. As soon as the value of <code>@State</code> property changes SwiftUI rebuilds <code>View</code> to respect state changes. Here is a simple example.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProductsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> products: [<span class="type">Product</span>]</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showFavorited: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123; <span class="keyword">self</span>.showFavorited.toggle() &#125;,</span><br><span class="line">                label: &#123; <span class="type">Text</span>(<span class="string">&quot;Change filter&quot;</span>) &#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="type">ForEach</span>(products) &#123; product <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span><span class="keyword">self</span>.showFavorited <span class="operator">||</span> product.isFavorited &#123;</span><br><span class="line">                    <span class="type">Text</span>(product.title)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>In the example above we have a straightforward screen with <code>Button</code> and <code>List</code> of products. As soon as we press the button, it changes the value of the state property, and SwiftUI recreates <code>View</code>.</p>
<h2 id="Binding"><a href="#Binding" class="headerlink" title="@Binding"></a>@Binding</h2><p><code>@Binding</code> provides reference like access for a value type. Sometimes we need to make the state of our <code>View</code> accessible for its children. But we can’t simply pass that value because it is a value type and Swift will pass the <code>copy</code> of that value. And this is where we can use <code>@Binding</code> Property Wrapper.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FilterView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> showFavorited: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Toggle</span>(isOn: <span class="variable">$showFavorited</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Change filter&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProductsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> products: [<span class="type">Product</span>]</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showFavorited: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">FilterView</span>(showFavorited: <span class="variable">$showFavorited</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">ForEach</span>(products) &#123; product <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span><span class="keyword">self</span>.showFavorited <span class="operator">||</span> product.isFavorited &#123;</span><br><span class="line">                    <span class="type">Text</span>(product.title)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We use <code>@Binding</code> to mark showFavorited property inside the FilterView. We also use <code>$</code> to pass a <code>binding reference</code>, because without <code>$</code> Swift will pass a <code>copy</code> of the value instead of passing bindable reference. FilterView can read and write the value of ProductsView’s showFavorited property. As soon as FilterView changes value of showFavorited property, SwiftUI will recreate the ProductsView and FilterView as its child.</p>
<blockquote>
<p><code>@Binding</code> provides a reference like access for a value type. That’s why it should be used only with value types. If Value of Binding is not value semantic, the updating behavior for any views that make use of the resulting Binding is unspecified.</p>
</blockquote>
<h2 id="ObservedObject"><a href="#ObservedObject" class="headerlink" title="@ObservedObject"></a>@ObservedObject</h2><p>We should use <code>@ObservedObject</code> to handle data that lives outside of SwiftUI, like your business logic. We can share it between multiple independent <code>View</code>s which can subscribe and observe changes on that object, and as soon as changes appear SwiftUI rebuilds all <code>View</code>s bound to this object. Let’s take a look at an example.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PodcastPlayer</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">private(set)</span> <span class="keyword">var</span> isPlaying: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span>()</span> &#123;</span><br><span class="line">        isPlaying <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pause</span>()</span> &#123;</span><br><span class="line">        isPlaying <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here we have PodcastPlayer <code>class</code> which we share between the screens of our app. Every screen has to show floating pause button in the case when the app is playing a podcast episode. SwiftUI tracks the changes on <code>ObservableObject</code> with the help of <code>@Published</code> property wrapper, and as soon as a property marked as <code>@Published</code> changes SwiftUI rebuild all <code>View</code>s bound to that PodcastPlayer object. Here we use <code>@ObservedObject</code> Property Wrapper to bind our EpisodesView to PodcastPlayer class</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EpisodesView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> player: <span class="type">PodcastPlayer</span></span><br><span class="line">    <span class="keyword">let</span> episodes: [<span class="type">Episode</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">self</span>.player.isPlaying &#123;</span><br><span class="line">                        <span class="keyword">self</span>.player.pause()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">self</span>.player.play()</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;, label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(player.isPlaying <span class="operator">?</span> <span class="string">&quot;Pause&quot;</span>: <span class="string">&quot;Play&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="type">ForEach</span>(episodes) &#123; episode <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(episode.title)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Remember, we can share <code>ObservableObject</code> between multiple views, that’s why it must be a <code>reference type/class</code>.</p>
</blockquote>
<h2 id="EnvironmentObject"><a href="#EnvironmentObject" class="headerlink" title="@EnvironmentObject"></a>@EnvironmentObject</h2><p>Instead of passing <code>ObservableObject</code> via <code>init</code> method of our <code>View</code> we can implicitly inject it into <code>Environment</code> of our <code>View</code> hierarchy. By doing this, we create the opportunity for all child <code>View</code>s of current <code>Environment</code> access this <code>ObservableObject</code>.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow</span>?</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scene</span>(<span class="keyword">_</span> <span class="params">scene</span>: <span class="type">UIScene</span>, <span class="params">willConnectTo</span> <span class="params">session</span>: <span class="type">UISceneSession</span>, <span class="params">options</span> <span class="params">connectionOptions</span>: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> window <span class="operator">=</span> <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">        <span class="keyword">let</span> episodes <span class="operator">=</span> [</span><br><span class="line">            <span class="type">Episode</span>(id: <span class="number">1</span>, title: <span class="string">&quot;First episode&quot;</span>),</span><br><span class="line">            <span class="type">Episode</span>(id: <span class="number">2</span>, title: <span class="string">&quot;Second episode&quot;</span>)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> player <span class="operator">=</span> <span class="type">PodcastPlayer</span>()</span><br><span class="line">        window.rootViewController <span class="operator">=</span> <span class="type">UIHostingController</span>(</span><br><span class="line">            rootView: <span class="type">EpisodesView</span>(episodes: episodes)</span><br><span class="line">                .environmentObject(player)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">self</span>.window <span class="operator">=</span> window</span><br><span class="line">        window.makeKeyAndVisible()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EpisodesView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> player: <span class="type">PodcastPlayer</span></span><br><span class="line">    <span class="keyword">let</span> episodes: [<span class="type">Episode</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">self</span>.player.isPlaying &#123;</span><br><span class="line">                        <span class="keyword">self</span>.player.pause()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">self</span>.player.play()</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;, label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(player.isPlaying <span class="operator">?</span> <span class="string">&quot;Pause&quot;</span>: <span class="string">&quot;Play&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="type">ForEach</span>(episodes) &#123; episode <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(episode.title)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As you can see, we can pass PodcastPlayer object via <code>environmentObject</code> modifier of our <code>View</code>. By doing this, we can easily access PodcastPlayer by defining it with <code>@EnvironmentObject</code> Property Wrapper. <code>@EnvironmentObject</code> uses dynamic member lookup feature to find PodcastPlayer class instance in the <code>Environment</code>, that’s why you don’t need to pass it via init method of EpisodesView. It works like magic.</p>
<h2 id="Environment"><a href="#Environment" class="headerlink" title="@Environment"></a>@Environment</h2><p>As we discussed in the previous chapter, we can pass custom objects into the <code>Environment</code> of a <code>View</code> hierarchy inside SwiftUI. But SwiftUI already has an <code>Environment</code> populated with system-wide settings. We can easily access them with <code>@Environment</code> Property Wrapper.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CalendarView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.calendar) <span class="keyword">var</span> calendar: <span class="type">Calendar</span></span><br><span class="line">    <span class="meta">@Environment</span>(\.locale) <span class="keyword">var</span> locale: <span class="type">Locale</span></span><br><span class="line">    <span class="meta">@Environment</span>(\.colorScheme) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Text</span>(locale.identifier)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>By marking our properties with <code>@Environment </code>Property Wrapper, we access and subscribe to changes of system-wide settings. As soon as Locale, Calendar or ColorScheme of the system change, SwiftUI recreates our CalendarView.</p>
<blockquote>
<p>To learn about new property wrappers released during WWDC20, take a look at my <a href="https://swiftwithmajid.com/2020/06/29/new-property-wrappers-in-swiftui/">New property wrappers in SwiftUI</a> post.</p>
</blockquote>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>Property Wrappers</tag>
      </tags>
  </entry>
</search>
