<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>公司法解读</title>
    <url>/zh-cn/Enterprise/Laws/company-law.html</url>
    <content><![CDATA[<h3 id="posted-by-LeoZhao"><a href="#posted-by-LeoZhao" class="headerlink" title="posted by LeoZhao"></a>posted by LeoZhao</h3><br>

<blockquote>
<p>在市场经济条件下，公司只是企业的一种。企业会有多种形态，诸如私人独资企业、合伙企业、合作社企业、公司企业和国有企业、集体企业。</p>
</blockquote>
<blockquote>
<p>公司法将对公司的管理权赋予公司的董事会。</p>
</blockquote>
<blockquote>
<p>有限责任则体现了公司最重要的特征，即股东作为投资者只在其投资限度内对公司承担出资责任，公司以其全部资产对公司债权人承担责任。</p>
</blockquote>
<blockquote>
<p>公司以其全部财产对公司的债务承担责任。有限责任公司的股东以其认缴的出资额为限对公司承担责任；股份有限公司的股东以其认购的股份为限对公司承担责任。</p>
</blockquote>
<blockquote>
<p>有的创业者则希望直接说了算，避免他人干扰，可能不会选择普通的有限责任公司这种形式，而会选择其他形式，比如独资企业或者一人公司（属于有限责任公司的特殊形式）。这种形式的弊端就是，无法直接借助外来的资本力量或者其他股东的人脉，只能独自发展。</p>
</blockquote>
<blockquote>
<p>一个自然人只能投资设立一个一人有限责任公司。</p>
</blockquote>
<blockquote>
<p>独资企业与一人公司都是营利性的经济组织，共同点在于这两种类型的企业的投资者均为一个主体，但他们也有所不同，一是从法律主体上看，独资企业没有法人资格，一人公司则相反，一经设立便具有法人资格；并且，独资企业的投资者只能是一名自然人，而一人公司的股东既可以是一名自然人，也可以是一家公司。二是从财产关系上看，独资企业没有注册资本，没有属于法律意义上的企业的财产，一人公司按公司法要求得有注册资本，公司独立拥有财产。三是从责任形式上看，独资企业的业主对企业债务承担无限责任，一人公司的股东对公司债务只负有限责任。当然，要想仅承担有限责任，根据法律规定，一人公司的股东要证明公司财产独立于股东自己的财产，否则应当对公司债务承担连带责任。实务中，股东完成这个证明责任其实非常难，有的时候提交账册也不一定能免除连带责任。</p>
</blockquote>
<blockquote>
<p>合伙企业，分为普通合伙企业与有限合伙企业。普通合伙企业由普通合伙人组成，合伙人对合伙企业债务承担无限连带责任。无限连带责任这一点是普通合伙企业与公司最大的区别。<br>合伙比公司的好处之一在于税收优惠。公司制无法避免双重征收所得税。而合伙企业中仅对合伙人个人征收所得税，大大提高了投资收益。<br>有限合伙人以其认缴的出资额为限对合伙企业债务承担责任，普通合伙人对合伙企业债务承担无限连带责任。在有限合伙的架构中，责任的不同带来了管理权的不同。有限合伙人（LP）承担有限责任，与有限参与权相契合，普通合伙人（GP）承担无限责任，与全部管理权相匹配。<br>同时，通过这种架构，可以形成比较独特的内部治理机制，有利于降低运营成本并提高决策效率。比如由 GP 负责日常经营和投资决策，无须考虑公司制基金对外投资往往涉及的董事会决议、股东会决议等，会降低经营管理的金钱和时间成本。</p>
</blockquote>
<blockquote>
<p>企业应当自下列信息形成之日起 20 个工作日内通过企业信用信息公示系统向社会公示：（一）有限责任公司股东或者股份有限公司发起人认缴和实缴的出资额、出资时间、出资方式等信息；（二）有限责任公司股东股权转让等股权变更信息；（三）行政许可取得、变更、延续信息；（四）知识产权出质登记信息；（五）受到行政处罚的信息；（六）其他依法应当公示的信息。工商行政管理部门发现企业未依照前款规定履行公示义务的，应当责令其限期履行。</p>
</blockquote>
<blockquote>
<p>法律要求股东须按公司章程规定的期限足额缴纳各自所认缴的出资额。股东以货币出资的，应当将出资资金足额存入公司在银行开设的账户；以非货币财产出资的，应当依法办理其财产权的转移手续。</p>
</blockquote>
<blockquote>
<p>人民法院受理破产申请后，债务人的出资人尚未完全履行出资义务的，管理人应当要求该出资人缴纳所认缴的出资，而不受出资期限的限制。</p>
</blockquote>
<blockquote>
<p>股东未履行或者未全面履行出资义务或者抽逃出资，公司根据公司章程或者股东会决议对其利润分配请求权、新股优先认购权、剩余财产分配请求权等股东权利做出相应的合理限制，该股东请求认定该限制无效的，人民法院不予支持。</p>
</blockquote>
<blockquote>
<p>有限责任公司的股东未履行出资义务或者抽逃全部出资，经公司催告缴纳或者返还，其在合理期间内仍未缴纳或者返还出资，公司以股东会决议解除该股东的股东资格，该股东请求确认该解除行为无效的，人民法院不予支持。</p>
</blockquote>
<blockquote>
<p>《公司法》第二十五条规定，有限责任公司章程应当载明下列事项：（一）公司名称和住所；（二）公司经营范围；（三）公司注册资本；（四）股东的姓名或者名称；（五）股东的出资方式、出资额和出资时间；（六）公司的机构及其产生办法、职权、议事规则；（七）公司法定代表人；（八）股东会会议认为需要规定的其他事项。</p>
</blockquote>
<blockquote>
<p>章程中许多事项，法律允许自由约定。比如股东持股比例、分红比例、认缴公司新增资本比例可与出资比例不一致、表决权可与出资比例不一致，可通过公司章程限制股权转让时的剩余股东同意权、优先购买权，公司章程对公司董、监、高转让本公司股份的限制可高于公司法。有的事项，法律不允许自由约定，比如不能约定公司亏本时某股东可以原价退股。<br>股东会定期会议的召开时间、股东会的议事方式和表决程序等等。《公司法》第四十二条规定：股东会会议由股东按照出资比例行使表决权；但是，公司章程另有规定的除外。股东会是公司的最高权力机构，极为重要。公司法允许章程对这些事项作出特殊规定，比如有的事项，某些股东想要一票否决权，就可以专门在章程中约定。<br>董事长、副董事长的产生办法、董事任期、董事会的职责、议事方式和表决程序，执行董事的职权等等。<br>有限责任公司关于股权转让的规定。根据公司法的规定，股东向股东以外的人转让股权，应当经其他股东过半数同意。经股东同意转让的股权，在同等条件下，其他股东有优先购买权。但公司章程对股权转让另有规定的，从其规定。<br>自然人股东死亡后，其合法继承人可以继承股东资格；但是，公司章程另有规定的除外。<br>公司向其他企业投资或者为他人提供担保，依照公司章程的规定，由董事会或者股东会、股东大会决议；公司章程对投资或者担保的总额及单项投资或者担保的数额有限额规定的，不得超过规定的限额。</p>
</blockquote>
<blockquote>
<p>许多创业者，不注意股权比例，只讲究情怀，没有想清楚股权架构和比例，结果在经营过程中，一旦发生分歧，就容易产生问题，问题有可能是「群龙无首」，在均等比例下，谁也控制不了公司，也有可能是「一股独大」，其他股东意见不受重视，而这些股东可能同时还是公司重要部门负责人。这样大家心怀不满，四分五裂。<br>一是避免把股权在一开始全部分完，应预留部分股权作为激励，吸引新的创业伙伴进来，或者随着公司发展、个人贡献度大小有所调整，否则后期没有东西可分。<br>二是每个创业伙伴的优势是不一样的，比如在资金、创意、技术、运营、个人品牌等方面各有优势，可以考虑不完全按照出资比例来分。<br>三是要考虑创业的不同阶段——初创，发展，成熟，会带来股权架构的变化，比如投资人进来之后，可能会引起原有股权的稀释，这些都应该在预料之中，做好心理准备。<br>四是核心成员要有相当的控制权，如果完全按人数均分，可能会陷入公司僵局，无法有效决策。<br>五是应对创业伙伴脱离队伍的股权处理有所考虑。比如有的公司在章程中专门约定公司回购股权的情形。当股东同时是公司高管或者重要员工，在上述人员离职等情形下，公司可以回购股东股权。</p>
</blockquote>
<blockquote>
<p>股权代持是一种直接持有股权的变通方式，具有隐密性和灵活性，可以在一定程度上使投资人更便捷地做出适当的出资安排。<br>有限责任公司的实际出资人与名义出资人订立合同，约定由实际出资人出资并享有投资权益，以名义出资人为名义股东，实际出资人与名义股东对该合同效力发生争议的，如无合同法第五十二条规定的情形，人民法院应当认定该合同有效。</p>
</blockquote>
<blockquote>
<p>法定代表人。在我国，公司是营利法人，会依法产生法定代表人。法人是与自然人区分的，我们每个有自然生命的人都是自然人；而法人是具有民事权利能力和民事行为能力，依法独立享有民事权利和承担民事义务的组织，是社会组织在法律上的人格化。代表法人从事民事活动的负责人，为法人的法定代表人。公司法定代表人依照公司章程的规定，由董事长、执行董事或者经理担任，并依法登记。公司法定代表人变更，应当办理变更登记。</p>
</blockquote>
<ol>
<li>刑事方面。有些犯罪构成单位犯罪，则法定代表人风险很大，很可能就被判刑了。</li>
<li>民事方面。如果公司欠款，执行的时候有可能对法定代表人实行限制出境等措施。</li>
<li>任职限制。</li>
</ol>
<blockquote>
<p>对于个人而言，虽然担任法定代表人有风险，但对于公司而言，选好一个法定代表人更重要，否则公司承担的风险更大。在我国，法定代表人对外代表公司（有的国家不采取法定代表人制度）。<br>法定代表人以法人名义从事的民事活动，其法律后果由法人承受。</p>
</blockquote>
<blockquote>
<p>公章代表一切。实务中，公章与签字最大的问题在于，有时候发生纠纷后，不知道公章是谁盖的，或者是谁伪造的，真相难以查清。而签字，一做笔迹鉴定就能落实责任人。</p>
</blockquote>
]]></content>
      <categories>
        <category>Enterprise</category>
        <category>Laws</category>
      </categories>
      <tags>
        <tag>Company Law</tag>
        <tag>Enterprise</tag>
      </tags>
  </entry>
  <entry>
    <title>为多个GitHub账户配置SSH</title>
    <url>/zh-cn/Basic-Operation/connect-mutiple-github-accounts-with-ssh.html</url>
    <content><![CDATA[<h3 id="posted-by-LeoZhao"><a href="#posted-by-LeoZhao" class="headerlink" title="posted by LeoZhao"></a>posted by LeoZhao</h3><br>


<p>通常我们经常会遇到这样的情况，需要为公司和个人的 <code>GitHub</code> 账户配置 <code>SSH Key</code>。但是，仅仅将自己电脑上已经生成的 <code>SSH Public Key</code> 粘贴到不同的 <code>GitHub</code> 账户是不行的，因为我们在生成 <code>SSH Key</code> 的时候，输入了邮箱，而 <code>SSH</code> 便是根据这一邮箱生成的，所以，想要连接多个账户，却想使用一个 <code>Key</code> 是很难实现的。</p>
<br>

<h2 id="第一步：生成多个-SSH-Key"><a href="#第一步：生成多个-SSH-Key" class="headerlink" title="第一步：生成多个 SSH Key"></a>第一步：生成多个 SSH Key</h2><p>我们想，既然 <code>SSH Key</code> 是根据邮箱生成的，那么，我们用多个邮箱生成多个 <code>SSH Key</code> 不就好了嘛。于是，用 <code>ssh-keygen</code> 生成两对 <code>SSH Key</code>，并且将他们区别命名。</p>
<p><img src="/zh-cn/Basic-Operation/connect-mutiple-github-accounts-with-ssh/ssh-key-directory.png" alt="就像我这样，两对SSHKey"></p>
<h2 id="第二步：添加好-SSH-Key"><a href="#第二步：添加好-SSH-Key" class="headerlink" title="第二步：添加好 SSH Key"></a>第二步：添加好 SSH Key</h2><blockquote>
<p><em>请在不同的 GitHub 账户上的 “Settings”&gt;”SSH and GPG Keys” 中配置好相对应的公钥( *.pub 文件里的 )，这里不再赘述</em>😅</p>
</blockquote>
<p>当你的 <code>SSH Key</code> 的文件名被命名为 <code>id_rsa</code> 时，系统会将其当作默认的 <code>SSH Key</code>，所以它是不用配置了的。<br><br></p>
<p>要将非 <code>id_rsa</code> 命名的 <code>SSH Key</code> 配置好的话，应执行命令 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add &lt;YourKeyPath&gt;</span><br></pre></td></tr></table></figure>

<p>完成后，我们试试。输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T github</span><br></pre></td></tr></table></figure>
<p>如果出现 <code>You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>，那么恭喜，现在你的 <code>SSH Key</code> 配置历程已经过去了一半！🥳<br><br></p>
<p>等等。。一半？</p>
<p>对啊，我们好好想想，前面，我们通过 <code>ssh-add</code> 配置了 Key，但是，这种配置并不是持久性的，也就是说，当你关机再回来的时候。🤯 你可能又要重新 <code>ssh-add</code> 一次了。</p>
<p>所以，我们还要：</p>
<h2 id="第三步：写-Config"><a href="#第三步：写-Config" class="headerlink" title="第三步：写 Config"></a>第三步：写 Config</h2><p>再你的 <code>.ssh</code> 文件夹下创建一个 <code>config</code> 文件</p>
<blockquote>
<p>请注意：<code>.ssh</code> 文件夹默认是隐藏的，Linux 和 Mac 用户可以 cd 到 <code>~/.ssh</code>目录，再 <code>touch config</code></p>
</blockquote>
<p>顾名思义，这个 <code>config</code> 文件是用来配置系统 SSH 连接的</p>
<p>我们在 <code>config</code> 文件里面这样写：</p>
<blockquote>
<p><code>Host</code> 后面的名称可以按自己的要求写，仅作为标识符<br><code>IdentityFile</code> 一定要对应好</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github-personal</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line"></span><br><span class="line">Host github-tomortec</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_tomortec</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure>

<p>这样，我们就真正配置好多个 <code>SSH Key</code> 了。🥳🥳🥳<br><br>测试一下吧，<br><code>ssh -T &lt;YourHostName&gt;</code><br><img src="/zh-cn/Basic-Operation/connect-mutiple-github-accounts-with-ssh/success.png" alt="OK！大功告成"></p>
<p>🎉🎉🎉🎉🎉🎉🎉🎉🎉？</p>
<h2 id="等等，这提醒很重要"><a href="#等等，这提醒很重要" class="headerlink" title="等等，这提醒很重要"></a>等等，这提醒很重要</h2><p>在配置了 <code>config</code> 文件后，对 <code>SSH</code> 链接的操作<strong>不再</strong>是<br>“<a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;</a>:YourName/YourRepo.git”（默认的） 了<br>而是应该变为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git@&lt;YourHostName&gt;:YourName/YourRepo.git</span><br></pre></td></tr></table></figure>

<p>记住！记住！记住！</p>
]]></content>
      <categories>
        <category>Basic Operation</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/zh-cn/uncategorized/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>商品拜物教各文献的解读</title>
    <url>/zh-cn/Economy/Political-Economy/interpretation-of-Commodity-Fetishism.html</url>
    <content><![CDATA[<h3 id="主题：商品拜物教在社会主义市场经济中的影响及应对措施"><a href="#主题：商品拜物教在社会主义市场经济中的影响及应对措施" class="headerlink" title="主题：商品拜物教在社会主义市场经济中的影响及应对措施"></a>主题：商品拜物教在社会主义市场经济中的影响及应对措施</h3><h2 id="一、《马克思商品拜物教理论的解读及当代价值》第四部分"><a href="#一、《马克思商品拜物教理论的解读及当代价值》第四部分" class="headerlink" title="一、《马克思商品拜物教理论的解读及当代价值》第四部分"></a>一、《马克思商品拜物教理论的解读及当代价值》第四部分</h2><p>主要提出三个问题：为什么，怎么样，怎么做</p>
<ol>
<li><p>社会主义市场经济存在商品拜物教（为什么）：<br> 从两个方面讨论：<strong>我国的所有制形式</strong>和<strong>市场经济</strong></p>
<blockquote>
<p>&emsp;&emsp;文章提出，“我国社会主义市场经济不仅包括公有制经济，也包括个体经济、私营经济和外资经济，大部分劳动产品采取商品 形式，通过市场进行等价交换，因而社会主义市场经济存在商品拜物教”，“从市场角度看，发展社会主义市场经济，必然要促进商品经济 快速发展，必然要使劳动产品转化为商品形式，商品交换这种物与物的关系必然会出 现并掩盖人与人的关系。因此，社会主义市场经济存在商品拜物教是毋庸置疑的。 当前，摆在我们面前的，不是争论商品、货币和资本拜物教的问题，而是如何认识和解 决由此产生的一系列社会经济问题”。</p>
</blockquote>
</li>
<li><p>商品拜物教对社会主义市场经济的影响（怎么样）：<br> 需要<strong>辩证</strong>看待</p>
<blockquote>
<p>积极方面：<br><br> &emsp;&emsp;社会主义市场经济要求发展商品经济，而发展商品经济培育出来的商品拜物有利于人们克服更低级别的、限制人们自由发展的封建束缚，形成<strong>商品意识和竞争意识</strong>，从而提高生产效率，推动社会主义市场经济发展。</p>
 <br>
 消极方面：<br>
 &emsp;&emsp;（1）消费主义盛行，动摇理想信念，与社会主义核心价值观不符，破坏社会和谐氛围
     <br>
 &emsp;&emsp;（2）拜金主义泛滥，使人们为获取财富不惜违背道德甚至违法乱纪
     <br>
 &emsp;&emsp;（3）诱导贪污腐败</blockquote>
</li>
<li><p>新时代对商品拜物教的批判研究（怎么做，措施）：</p>
<blockquote>
<p>&emsp;&emsp;（1）正确态度：<strong>辩证</strong>看待</p>
 <br>
 &emsp;&emsp;（2）制度保障：强化市场经济中的社会主义因素，完善社会主义市场经济运行机制。
 <br>
 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;a. 壮大公有制经济，巩固公 有制经济的主体地位，充分发挥国有经济在国民经济中经济的主导作用；
 <br>
 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;b. 不断完善社会主义市场经济体制，提高市场经济运行效率和水平；
 <br>
 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;c. 完善法律法规，加大反腐力度。
 <br>
 &emsp;&emsp;（3）社会氛围：加强社会主义意识形态建设，巩固社会主义核心价值观。
 <br>
 &emsp;&emsp;（4）学科发展：树立以人民为中心的发展理念，发展中国特色社会主义政治经济学。</blockquote>
</li>
</ol>
<h2 id="二、《马克思主义哲学视角下中国经济社会问题探析》"><a href="#二、《马克思主义哲学视角下中国经济社会问题探析》" class="headerlink" title="二、《马克思主义哲学视角下中国经济社会问题探析》"></a>二、《马克思主义哲学视角下中国经济社会问题探析》</h2><p>主要提出两个问题：商品拜物教的<strong>影响</strong>（意义和问题），解决消费问题的措施</p>
<ol>
<li><p>商品拜物教的意义：</p>
<blockquote>
<p>&emsp;&emsp;作为历史发展的产物， 商品拜物教的存在既有它的必然性， 也有它的历史阶段性。 商品拜物教作为商品经济的伴生物， 在一定程度上确实促进了商品经济的进一步发展，并且增加了物质产品的丰富程度，改善了人们的生活水平。</p>
</blockquote>
</li>
<li><p>商品拜物教带来的问题：</p>
<blockquote>
<p>&emsp;&emsp;（1）名牌效应：然而随着商品品牌效应的形成，人们在购买商品时，往往被商品的品牌牵着鼻子走，失去购买的主动权。 不利于中国经济的稳定发展。</p>
 <br>
 &emsp;&emsp;（2）使人道德沦丧：必然导致人们精神麻木，不利于社会主义精神文明建设，更不利 于社会主义现代化建设。
 <br>
 &emsp;&emsp;（3）盲目消费造成资源浪费：过度式消费终将会造成社会资源的严重浪费， 短时间内看似促进了社会经济发展，但长此以往却不利于经 济的可持续发展。 
 <br>
 &emsp;&emsp;（4）拉大贫富差距：人们对物质的极度追求导致的过度消费，还会拉大贫富差距，破坏社会和谐，甚至引发社会矛盾，造成仇富现象的出现，不利于社会的和谐发展。</blockquote>
</li>
<li><p>解决社会中消费问题的<strong>措施</strong>：（从个人、消费环境、社会、哲学方法论出发）</p>
<blockquote>
<p>&emsp;&emsp;（1）个人：倡导形成正确价值观</p>
 <br>
 &emsp;&emsp;（2）消费环境：监管。严禁商家通过哄抬商品物价从中牟取暴利。政府部门要对商家在广告媒体上的宣传工作进行严格把关······并做好宣传工作，提醒广大消 费者理性消费。 大力支持企业研发和生产绿色环保产品，要 注重提升商品的实用性，倡导社会实现绿色消费。 此外，还要 “适时调整消费税，建立科学合理的高消费税制。
 <br>
 &emsp;&emsp;（3）社会：树立正确的消费观，注重精神文明建设。 
 <br>
 &emsp;&emsp;（4）方法论：抓住事物发展的本质，深入解读当前 中国经济社会问题，由理论再到实际，找到一条解决问题的 正确途径。</blockquote>
</li>
</ol>
<h2 id="三、《现代视阈下的商品拜物教反思》"><a href="#三、《现代视阈下的商品拜物教反思》" class="headerlink" title="三、《现代视阈下的商品拜物教反思》"></a>三、《现代视阈下的商品拜物教反思》</h2><p>主要提出两个问题：商品拜物教的怪象（影响），挣脱羁绊（解决措施）</p>
<ol>
<li><p>商品拜物教的怪象（<strong>影响</strong>）：</p>
<blockquote>
<p>&emsp;&emsp;（1）对于商品的迷信、货币的迷信、资本的迷信使现代人几乎不去关 注商品、货币、资本背后的内容，形式作为对内容的表 达的重要性已经远远超过内容的重要性。</p>
 <br>
 &emsp;&emsp;（2）人们过度地对物和形式化的 追求，严重地影响人们真正需要面对和处理的人与人关系关注，甚至开始丧失对人性意义以及健康生活方 式的正确思考。</blockquote>
</li>
<li><p>挣脱羁绊（解决<strong>措施</strong>）：（从制度、政府、个人出发）</p>
<blockquote>
<p>&emsp;&emsp;（1）制度：发挥社会主义制度优越性与进一步完善社会主义现代市场经济</p>
 <br>
 &emsp;&emsp;（2）政府：弘扬正能量与政府作用。
 <br>
         &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;a. 在社会范围内弘扬正能量；
         <br>
         &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;b. 弘扬和践行社会主义核心价值观，将正确的 商品观、金钱观、资本观注入现代市场经济中；
         <br>
         &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;c. 在社会主义的市场经济体制之下，要充分发挥政府的作用。结合我们特殊的国情，充分发挥政府在资源配置中的引导性作用，减弱市场行为的盲目性，缓和市场自发配置资源的无序性。
         <br>
 &emsp;&emsp;（3）个人：大力倡导正确的生活方式与从我做起。真诚待人、绿色消费、从我开始建立 人与人之间的信任、从我开始影响身边的每一个人。</blockquote>
</li>
</ol>
<h2 id="四、《中国商品拜物教状况的研究》（节选第三章第二节和第四章）"><a href="#四、《中国商品拜物教状况的研究》（节选第三章第二节和第四章）" class="headerlink" title="四、《中国商品拜物教状况的研究》（节选第三章第二节和第四章）"></a>四、《中国商品拜物教状况的研究》（节选第三章第二节和第四章）</h2><p>主要提出两个问题：商品拜物教对我国经济社会造成的影响和抑制现阶段商品拜物教现象发展的对策</p>
<ol>
<li>商品拜物教对我国经济社会造成的<strong>影响</strong>:<blockquote>
<p>&emsp;&emsp;（1）贪官腐败</p>
 <br>
 &emsp;&emsp;（2）两极分化：贫富差距拉大
 <br>
 &emsp;&emsp;（3）学术商业化
 <br>
 &emsp;&emsp;（4）环境问题
 </blockquote>
</li>
<li>抑制现阶段商品拜物教现象发展的对策（<strong>措施</strong>）：（从个人和社会角度出发）<blockquote>
<p>&emsp;&emsp;（1）个人层面：</p>
 <br>
     &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;a. 正确认识商品拜物教的内涵：提高明辨是非的能力，不盲目跟风，辩证地看待商品拜物教在我国社会主义市场经济发展中的利弊，让更 多人认识到商品是为我们而服务的；
 <br>
     &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;b. 正确认识人们对商品的需要（减少名牌效应带来的影响）；
 <br>
     &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;c. 正确认识商品拜物教存在的客观性；
 <br>
 &emsp;&emsp;（2）社会层面：
 <br>
     &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;a. 制度：逐步完善我国的经济制度（尤其是引导非公有制经济向正确的道路发展）；
     <br>
     &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;b. 法制：逐步健全我国的法治体系；
     <br>
     &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;c. 道德：逐步加强我国的道德建设；
     <br>
     &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;d. 发展：大力发展生产力（根本途径）。</blockquote>
</li>
</ol>
<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于商品拜物教的<strong>影响</strong>，不少学者支持应对商品拜物教<strong>辩证</strong>看待，一方面，商品拜物教刺激人们生产，促使经济发展、生活改善；另一方面，商品拜物教引发了 消费主义、贪官腐败、名牌效应、道德沦丧、贫富差距拉大 甚至还有 资源浪费、学术商业化 等问题。<br><br><br>对于应对<strong>措施</strong>，各学者主要从个人、社会和政府三方面出发。<strong>个人</strong>要正确认识商品拜物教、提高思想道德水平；<strong>社会</strong>要树立良好风尚，抑制消费主义、拜金主义；<strong>国家</strong>要完善经济制度，加强监管，加强法制建设，大力发展生产力。</p>
]]></content>
      <categories>
        <category>Economy</category>
        <category>Political Economy</category>
      </categories>
      <tags>
        <tag>Commodity Fetishism</tag>
        <tag>Marx</tag>
        <tag>Political Economy</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift Guard Statement（Swift中的 guard 语句）</title>
    <url>/zh-cn/Swift/Basic-usage/swift-guard.html</url>
    <content><![CDATA[<h3 id="posted-by-ecerney"><a href="#posted-by-ecerney" class="headerlink" title="posted by ecerney"></a>posted by ecerney</h3><p>这篇文章转自：<a href="https://ericcerney.com/swift-guard-statement/">https://ericcerney.com/swift-guard-statement/</a></p>
<br>

<p>When I first saw the Swift <code>guard</code> statement during Apple’s Platform State of the Union, I couldn’t quite understand why I would ever use it. So what is it? The tl;dr is as follows:<br><br></p>
<p><code>Like an if statement, guard executes statements based on a Boolean value of an expression. Unlike an if statement, guard statements only run if the conditions are not met. You can think of guard more like an Assert, but rather than crashing, you can gracefully exit.</code><br><br></p>
<p>Even after seeing some examples, I only saw it as a confusing way to accomplish what we already could with Optional Binding or with <code>if-else</code> statements alone.</p>
<br>
It wasn’t until I started discussing it over this Twitter conversation that I realized there are actually some interesting benefits of using such syntax.
<br>
<br>

<h2 id="Diving-In"><a href="#Diving-In" class="headerlink" title="Diving In"></a>Diving In</h2><p>Let’s take a simple example comparing current techniques vs using the new guard statement:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooManualCheck</span>(<span class="params">x</span>: <span class="type">Int</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">||</span> x <span class="operator">&lt;=</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do stuff with x</span></span><br><span class="line">    x<span class="operator">!</span>.description</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is the most basic Objective-C style way to make sure a value exists and that it meets a condition. Now this works fine, but has a couple flaws:</p>
<ol>
<li>You’re checking for a condition that you don’t want, rather than checking for the value you do want. Code becomes confusing when you have a bunch of checks like this. What you’re hoping for here is that your condition actually doesn’t pass.</li>
<li>You also need to force unwrap the optional value after the condition fails.<br></li>
</ol>
<p>Swift gave us a way to clean this up and fix some of these flaws through Optional Binding:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooBinding</span>(<span class="params">x</span>: <span class="type">Int</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x <span class="operator">=</span> x <span class="keyword">where</span> x <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Do stuff with x</span></span><br><span class="line">        x.description</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This removes both of the flaws that the first function had, but adds a new one. Here you’re putting your desired code within all the conditions, rather than afterward. You might not immediately see a problem with this, but you could imagine how confusing it could become if it was nested with numerous conditions that all needed to be met before running your statements.</p>
<p>The way to clean this up is to do each of your checks first, and exit if any aren’t met. This allows easy understanding of what conditions will make this function exit.</p>
<p>I’ve heard this called the Bouncer Pattern, which makes a lot of sense. You want to get rid of the bad cases before they get in the door. It also allows you to think about one case at a time, rather than figuring out how all combinations need to work together.</p>
<p>Here enters the <code>guard</code> statement:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooGuard</span>(<span class="params">x</span>: <span class="type">Int</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> x <span class="operator">=</span> x <span class="keyword">where</span> x <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do stuff with x</span></span><br><span class="line">    x.description</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using <code>guard</code> solves all 3 of the issues mentioned above:</p>
<ol>
<li>Checking for the condition you do want, not the one you don’t. This again is similar to an <code>assert</code>. If the condition is not met, <code>guard‘s else</code> statement is run, which breaks out of the function.</li>
<li>If the condition passes, the optional variable here is automatically unwrapped for you within the scope that the <code>guard</code> statement was called – in this case, the <code>fooGuard(_:)</code> function. This is an important, yet notably strange feature that really makes the <code>guard</code> statement useful.</li>
<li>You are checking for bad cases early, making your function more readable and easier to maintain.<br></li>
</ol>
<p>The cool thing is that this same pattern holds true for non-optional values as well:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooNonOptionalGood</span>(<span class="params">x</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> x <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do stuff with x</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fooNonOptionalBad</span>(<span class="params">x</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x <span class="operator">&lt;=</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Value requirements not met, do something</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do stuff with x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Wrapping-Up"><a href="#Wrapping-Up" class="headerlink" title="Wrapping Up"></a>Wrapping Up</h2><p>I hope this simple example shows how you could start using <code>guard</code> immediately in your Swift code to make your function/methods more clear. It’s easy for us to immediately judge the value of a new feature until you give it a chance and see what it can or can’t do for you.</p>
<p>Going from Objective-C to Swift is a huge change, not only to syntax, but how you have to look at architecting your code. You can only benefit from this awesome new language if you actively change your mindset while writing code by expanding your everyday patterns and style.</p>
]]></content>
      <categories>
        <category>Swift</category>
        <category>Basic usage</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>keyword</tag>
        <tag>reprint</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 中设置APP的图标（Icon）和启动页面（Launch Screen）</title>
    <url>/zh-cn/Swift/swiftui-project-icon-and-launch-pic.html</url>
    <content><![CDATA[<h3 id="posted-by-LeoZhao"><a href="#posted-by-LeoZhao" class="headerlink" title="posted by LeoZhao"></a>posted by LeoZhao</h3><br>

<p>图标 <code>Icon</code> 和启动页面 <code>Launch Screen</code> 无疑是一个 App 最重要的东西之一，它能给用户以第一印象，是否能 catch one’s eyes 就看图标和启动页面的表现了（况且，连图标和启动页面都没有的话也太水了吧 😂 ）。<br><br></p>
<p>幸好在 Xcode 中设置 <code>Icon</code> 和 <code>Launch Screen</code> 比较简单，不用花多少功夫，现在就让我们 diving in吧。</p>
<h2 id="设置图标（Icon）"><a href="#设置图标（Icon）" class="headerlink" title="设置图标（Icon）"></a>设置图标（Icon）</h2><p>首先，要准备4组图标（如果是发布在 <code>iOS</code> 平台上），这4组分别是 <code>120 x 120 px</code>，<code>152 x 152 px</code>，<code>167 x 167 px</code>，<code>1024 x 1024 px</code> 的尺寸，要 <code>PNG</code> 格式。<br><br>然后，将这4张图片 <code>Add Files to &lt;Your Project&gt;</code>。<br><br>接下来，打开 <code>Assets.xcassets</code>，将项目结构中的图片拉入 <code>AppIcon</code> 中的相应位置，就像这样<br><br><br><img src="/zh-cn/Swift/swiftui-project-icon-and-launch-pic/appicon.png" alt="将4个图标放入xcassets"></p>
<br>

<p>最后，在你的 xcodeproj 中将 <code>App Icons Source</code> 设为 <code>AppIcon</code>，接下来重新 <code>Build</code> 即可。</p>
<h2 id="设置启动页面（Launch-Screen）"><a href="#设置启动页面（Launch-Screen）" class="headerlink" title="设置启动页面（Launch Screen）"></a>设置启动页面（Launch Screen）</h2><p>在我当前的 Xcode 版本（13.0）中，要设置启动页面需要有 <code>Launch Screen File</code>，事实上，这个文件可以使用 <code>.storyboard</code>。<br><br>我们在项目中创建 <code>.storyboard</code>文件，我将其命名为 “Launch Screen.storyboard”。<br><br>打开我们的 storyboard，然后在里面设计即可。<br><br>最后，在我们的 xcodeproj 中将 <code>Launch Screen File</code> 设置为 “Launch Screen.storyboard”。<br><br>这样就完成了。<br><br></p>
<h2 id="附：在-storyboard-中全屏图片"><a href="#附：在-storyboard-中全屏图片" class="headerlink" title="附：在 storyboard 中全屏图片"></a>附：在 storyboard 中全屏图片</h2><p><em>因为我的启动界面是用图片做成的静态界面，所以我介绍一下storyboard 中全屏图片（保留 <code>Safe Area</code> ）的方法</em></p>
<p>首先，在 <code>Assets.xcassets</code> 中引入图片，<code>直接拖入</code>或<code>点击左下角的+</code>都可。<br><br>然后，在 storyboard 中，点击右上角的加号，添加一个 <code>Image View</code>，并在 <code>Image View</code>的属性面板中设置 <code>Image</code> 为刚添加的 asset。<br><br>接下来，选中新添加的 <code>Image View</code> ，点击底部栏中的 <code>Add New Constraints（意为约束）</code>，并将上下左右四个为虚线的 <code>constraints</code> 点亮、设置为0，设置完成后点击面板下面的 <code>Add Constraints</code>。<br><br><br><img src="/zh-cn/Swift/swiftui-project-icon-and-launch-pic/launch_screen.png" alt="Add New Constraints"><br><br><br><img src="/zh-cn/Swift/swiftui-project-icon-and-launch-pic/constraints.png" alt="set all Constraints"></p>
<br>

<p>最后，就是设置图片居中了，注意选中 <code>Image View</code> ，点击 <code>Add New Constraints</code> 左边的 <code>Align</code>，选中 <code>Horizontally in Container</code> 和 <code>Vertically in Container</code>，设置完成后点击面板下面的 <code>Add Constraints</code>，设置完成 🥳 。<br><br><br><img src="/zh-cn/Swift/swiftui-project-icon-and-launch-pic/align.png" alt="the final results"></p>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>Xcode</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI Property Wrappers</title>
    <url>/zh-cn/Swift/swiftui-property-wrappers.html</url>
    <content><![CDATA[<h3 id="posted-by-Majid"><a href="#posted-by-Majid" class="headerlink" title="posted by Majid"></a>posted by Majid</h3><p>这篇文章转载自：<a href="https://swiftwithmajid.com/2019/06/12/understanding-property-wrappers-in-swiftui/">https://swiftwithmajid.com/2019/06/12/understanding-property-wrappers-in-swiftui/</a><br>中文翻译可以看这篇文章：<a href="https://www.cnblogs.com/xiaoniuzai/p/11417123.html">https://www.cnblogs.com/xiaoniuzai/p/11417123.html</a></p>
<br>

<p>Today I want to continue this topic by covering <code>Property Wrappers</code> provided by SwiftUI. SwiftUI gives us <code>@State</code>, <code>@Binding</code>, <code>@ObservedObject</code>, <code>@EnvironmentObject</code>, and <code>@Environment</code> Property Wrappers. So let’s try to understand the differences between them and when and why which one we have to use.</p>
<br>

<h2 id="Property-Wrappers"><a href="#Property-Wrappers" class="headerlink" title="Property Wrappers"></a>Property Wrappers</h2><p><code>Property Wrappers</code> feature described in <a href="https://github.com/DougGregor/swift-evolution/blob/property-wrappers/proposals/0258-property-wrappers.md">SE-0258</a> proposal. The main goal here is wrapping properties with logic which can be extracted into the separated struct to reuse it across the codebase.</p>
<h2 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h2><p><code>@State</code> is a <code>Property Wrapper</code> which we can use to describe <code>View</code>’s state. SwiftUI will store it in special internal memory outside of <code>View</code> struct. Only the related <code>View</code> can access it. As soon as the value of <code>@State</code> property changes SwiftUI rebuilds <code>View</code> to respect state changes. Here is a simple example.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProductsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> products: [<span class="type">Product</span>]</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showFavorited: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123; <span class="keyword">self</span>.showFavorited.toggle() &#125;,</span><br><span class="line">                label: &#123; <span class="type">Text</span>(<span class="string">&quot;Change filter&quot;</span>) &#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="type">ForEach</span>(products) &#123; product <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span><span class="keyword">self</span>.showFavorited <span class="operator">||</span> product.isFavorited &#123;</span><br><span class="line">                    <span class="type">Text</span>(product.title)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>In the example above we have a straightforward screen with <code>Button</code> and <code>List</code> of products. As soon as we press the button, it changes the value of the state property, and SwiftUI recreates <code>View</code>.</p>
<h2 id="Binding"><a href="#Binding" class="headerlink" title="@Binding"></a>@Binding</h2><p><code>@Binding</code> provides reference like access for a value type. Sometimes we need to make the state of our <code>View</code> accessible for its children. But we can’t simply pass that value because it is a value type and Swift will pass the <code>copy</code> of that value. And this is where we can use <code>@Binding</code> Property Wrapper.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FilterView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> showFavorited: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Toggle</span>(isOn: <span class="variable">$showFavorited</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Change filter&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProductsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> products: [<span class="type">Product</span>]</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showFavorited: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">FilterView</span>(showFavorited: <span class="variable">$showFavorited</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">ForEach</span>(products) &#123; product <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span><span class="keyword">self</span>.showFavorited <span class="operator">||</span> product.isFavorited &#123;</span><br><span class="line">                    <span class="type">Text</span>(product.title)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We use <code>@Binding</code> to mark showFavorited property inside the FilterView. We also use <code>$</code> to pass a <code>binding reference</code>, because without <code>$</code> Swift will pass a <code>copy</code> of the value instead of passing bindable reference. FilterView can read and write the value of ProductsView’s showFavorited property. As soon as FilterView changes value of showFavorited property, SwiftUI will recreate the ProductsView and FilterView as its child.</p>
<blockquote>
<p><code>@Binding</code> provides a reference like access for a value type. That’s why it should be used only with value types. If Value of Binding is not value semantic, the updating behavior for any views that make use of the resulting Binding is unspecified.</p>
</blockquote>
<h2 id="ObservedObject"><a href="#ObservedObject" class="headerlink" title="@ObservedObject"></a>@ObservedObject</h2><p>We should use <code>@ObservedObject</code> to handle data that lives outside of SwiftUI, like your business logic. We can share it between multiple independent <code>View</code>s which can subscribe and observe changes on that object, and as soon as changes appear SwiftUI rebuilds all <code>View</code>s bound to this object. Let’s take a look at an example.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PodcastPlayer</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">private(set)</span> <span class="keyword">var</span> isPlaying: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span>()</span> &#123;</span><br><span class="line">        isPlaying <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pause</span>()</span> &#123;</span><br><span class="line">        isPlaying <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here we have PodcastPlayer <code>class</code> which we share between the screens of our app. Every screen has to show floating pause button in the case when the app is playing a podcast episode. SwiftUI tracks the changes on <code>ObservableObject</code> with the help of <code>@Published</code> property wrapper, and as soon as a property marked as <code>@Published</code> changes SwiftUI rebuild all <code>View</code>s bound to that PodcastPlayer object. Here we use <code>@ObservedObject</code> Property Wrapper to bind our EpisodesView to PodcastPlayer class</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EpisodesView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> player: <span class="type">PodcastPlayer</span></span><br><span class="line">    <span class="keyword">let</span> episodes: [<span class="type">Episode</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">self</span>.player.isPlaying &#123;</span><br><span class="line">                        <span class="keyword">self</span>.player.pause()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">self</span>.player.play()</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;, label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(player.isPlaying <span class="operator">?</span> <span class="string">&quot;Pause&quot;</span>: <span class="string">&quot;Play&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="type">ForEach</span>(episodes) &#123; episode <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(episode.title)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Remember, we can share <code>ObservableObject</code> between multiple views, that’s why it must be a <code>reference type/class</code>.</p>
</blockquote>
<h2 id="EnvironmentObject"><a href="#EnvironmentObject" class="headerlink" title="@EnvironmentObject"></a>@EnvironmentObject</h2><p>Instead of passing <code>ObservableObject</code> via <code>init</code> method of our <code>View</code> we can implicitly inject it into <code>Environment</code> of our <code>View</code> hierarchy. By doing this, we create the opportunity for all child <code>View</code>s of current <code>Environment</code> access this <code>ObservableObject</code>.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow</span>?</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scene</span>(<span class="keyword">_</span> <span class="params">scene</span>: <span class="type">UIScene</span>, <span class="params">willConnectTo</span> <span class="params">session</span>: <span class="type">UISceneSession</span>, <span class="params">options</span> <span class="params">connectionOptions</span>: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> window <span class="operator">=</span> <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">        <span class="keyword">let</span> episodes <span class="operator">=</span> [</span><br><span class="line">            <span class="type">Episode</span>(id: <span class="number">1</span>, title: <span class="string">&quot;First episode&quot;</span>),</span><br><span class="line">            <span class="type">Episode</span>(id: <span class="number">2</span>, title: <span class="string">&quot;Second episode&quot;</span>)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> player <span class="operator">=</span> <span class="type">PodcastPlayer</span>()</span><br><span class="line">        window.rootViewController <span class="operator">=</span> <span class="type">UIHostingController</span>(</span><br><span class="line">            rootView: <span class="type">EpisodesView</span>(episodes: episodes)</span><br><span class="line">                .environmentObject(player)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">self</span>.window <span class="operator">=</span> window</span><br><span class="line">        window.makeKeyAndVisible()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EpisodesView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> player: <span class="type">PodcastPlayer</span></span><br><span class="line">    <span class="keyword">let</span> episodes: [<span class="type">Episode</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">self</span>.player.isPlaying &#123;</span><br><span class="line">                        <span class="keyword">self</span>.player.pause()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">self</span>.player.play()</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;, label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(player.isPlaying <span class="operator">?</span> <span class="string">&quot;Pause&quot;</span>: <span class="string">&quot;Play&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="type">ForEach</span>(episodes) &#123; episode <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(episode.title)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As you can see, we can pass PodcastPlayer object via <code>environmentObject</code> modifier of our <code>View</code>. By doing this, we can easily access PodcastPlayer by defining it with <code>@EnvironmentObject</code> Property Wrapper. <code>@EnvironmentObject</code> uses dynamic member lookup feature to find PodcastPlayer class instance in the <code>Environment</code>, that’s why you don’t need to pass it via init method of EpisodesView. It works like magic.</p>
<h2 id="Environment"><a href="#Environment" class="headerlink" title="@Environment"></a>@Environment</h2><p>As we discussed in the previous chapter, we can pass custom objects into the <code>Environment</code> of a <code>View</code> hierarchy inside SwiftUI. But SwiftUI already has an <code>Environment</code> populated with system-wide settings. We can easily access them with <code>@Environment</code> Property Wrapper.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CalendarView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.calendar) <span class="keyword">var</span> calendar: <span class="type">Calendar</span></span><br><span class="line">    <span class="meta">@Environment</span>(\.locale) <span class="keyword">var</span> locale: <span class="type">Locale</span></span><br><span class="line">    <span class="meta">@Environment</span>(\.colorScheme) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Text</span>(locale.identifier)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>By marking our properties with <code>@Environment </code>Property Wrapper, we access and subscribe to changes of system-wide settings. As soon as Locale, Calendar or ColorScheme of the system change, SwiftUI recreates our CalendarView.</p>
<blockquote>
<p>To learn about new property wrappers released during WWDC20, take a look at my <a href="https://swiftwithmajid.com/2020/06/29/new-property-wrappers-in-swiftui/">New property wrappers in SwiftUI</a> post.</p>
</blockquote>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>reprint</tag>
        <tag>SwiftUI</tag>
        <tag>Property Wrappers</tag>
      </tags>
  </entry>
  <entry>
    <title>灵感——</title>
    <url>/zh-cn/Insights/0/innovation-insights-0.html</url>
    <content><![CDATA[<h3 id="posted-by-LeoZhao"><a href="#posted-by-LeoZhao" class="headerlink" title="posted by LeoZhao"></a>posted by LeoZhao</h3><br>

<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>Insights</category>
        <category>0</category>
      </categories>
      <tags>
        <tag>Innovation</tag>
        <tag>Insights</tag>
      </tags>
  </entry>
</search>
